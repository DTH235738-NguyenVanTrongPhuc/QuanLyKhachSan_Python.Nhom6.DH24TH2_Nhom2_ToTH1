# main.py - Enhanced version with login tab
import tkinter as tk
from tkinter import ttk
import logging
import sys
import os
from database import Database
from utils import center_window
from views.employee_view import EmployeeView
from views.customer_view import CustomerView
from views.room_view import RoomView
from views.booking_view import BookingView
from views.login_view import LoginView
from config import APP_CONFIG

# ! THI·∫æT L·∫¨P LOGGING V·ªöI M·ª®C ƒê·ªò CHI TI·∫æT CAO
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('app_debug.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

class HotelManagementApp:
    def __init__(self):
        # ! KH·ªûI T·∫†O ·ª®NG D·ª§NG QU·∫¢N L√ù KH√ÅCH S·∫†N
        logger.info("üöÄ Kh·ªüi t·∫°o ·ª©ng d·ª•ng Qu·∫£n l√Ω Kh√°ch s·∫°n")
        try:
            logger.info("üñ•Ô∏è ƒêang t·∫°o c·ª≠a s·ªï ch√≠nh...")
            self.root = tk.Tk()
            logger.info(f"‚úÖ ƒê√£ t·∫°o c·ª≠a s·ªï ch√≠nh: {self.root}")
            
            self.root.title("H·ªÜ TH·ªêNG QU·∫¢N L√ù KH√ÅCH S·∫†N")
            
            # ! KI·ªÇM TRA K√çCH TH∆Ø·ªöC M√ÄN H√åNH
            screen_width = self.root.winfo_screenwidth()
            screen_height = self.root.winfo_screenheight()
            logger.info(f"üì∫ K√≠ch th∆∞·ªõc m√†n h√¨nh: {screen_width}x{screen_height}")
            
            center_window(self.root, APP_CONFIG['window_width'], APP_CONFIG['window_height'])
            self.root.resizable(True, True)
            
            # ! KH·ªûI T·∫†O K·∫æT N·ªêI DATABASE
            logger.info("üîó ƒêang k·∫øt n·ªëi database...")
            self.db = Database()
            if self.db.connection is None:
                logger.error("‚ùå K·∫øt n·ªëi database th·∫•t b·∫°i!")
                self.root.destroy()
                return
            logger.info("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng")
            
            # ! TH√îNG TIN USER HI·ªÜN T·∫†I
            self.current_user_id = None
            self.current_user_role = None
            self.current_user_name = None
            
            # ! KH·ªûI T·∫†O BI·∫æN TAB V·ªöI GI√Å TR·ªä NONE
            self.employee_tab = None
            self.customer_tab = None
            self.room_tab = None
            self.booking_tab = None
            
            # ! T·∫†O UI V·ªöI TAB ƒêƒÇNG NH·∫¨P ƒê·∫¶U TI√äN
            self.create_ui()
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói kh·ªüi t·∫°o ·ª©ng d·ª•ng: {str(e)}", exc_info=True)
            import traceback
            traceback.print_exc()

    def create_ui(self):
        # ! T·∫†O GIAO DI·ªÜN NG∆Ø·ªúI D√ôNG CH√çNH
        logger.info("üé® ƒêang t·∫°o giao di·ªán ch√≠nh")
        try:
            # ! X√ìA C√ÅC WIDGET HI·ªÜN C√ì
            for widget in self.root.winfo_children():
                widget.destroy()

            # ! T·∫†O NOTEBOOK CHO C√ÅC TAB
            self.notebook = ttk.Notebook(self.root)
            self.notebook.pack(fill="both", expand=True, padx=10, pady=10)

            # ! T·∫†O TAB ƒêƒÇNG NH·∫¨P (LU√îN HI·ªÇN TH·ªä)
            self.login_tab = LoginView(self.notebook, self.db, self.on_login_success)
            self.notebook.add(self.login_tab.tab, text="ƒêƒÉng nh·∫≠p")

            # ! T·∫†O C√ÅC TAB KH√ÅC NH∆ØNG V√î HI·ªÜU H√ìA BAN ƒê·∫¶U
            self.employee_tab = EmployeeView(self.notebook, self.db, None)
            self.customer_tab = CustomerView(self.notebook, self.db)
            self.room_tab = RoomView(self.notebook, self.db, None)
            self.booking_tab = BookingView(self.notebook, self.db, None, None)

            # ! TH√äM C√ÅC TAB NH∆ØNG V√î HI·ªÜU H√ìA CH√öNG
            self.notebook.add(self.employee_tab.tab, text="Nh√¢n vi√™n")
            self.notebook.add(self.customer_tab.tab, text="Kh√°ch h√†ng")
            self.notebook.add(self.room_tab.tab, text="Qu·∫£n l√Ω ph√≤ng")
            self.notebook.add(self.booking_tab.tab, text="ƒê·∫∑t ph√≤ng")

            # ! BAN ƒê·∫¶U V√î HI·ªÜU H√ìA T·∫§T C·∫¢ TAB TR·ª™ ƒêƒÇNG NH·∫¨P
            self.update_tab_access()

            logger.info("‚úÖ ƒê√£ t·∫°o giao di·ªán ch√≠nh th√†nh c√¥ng")
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói t·∫°o giao di·ªán ch√≠nh: {str(e)}", exc_info=True)

    def on_login_success(self, user_id, role, user_name):
        # ! CALLBACK KHI ƒêƒÇNG NH·∫¨P TH√ÄNH C√îNG
        logger.info(f"‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng: {user_name} ({user_id}) - Vai tr√≤: {role}")
        self.current_user_id = user_id
        self.current_user_role = role
        self.current_user_name = user_name
        
        # ! C·∫¨P NH·∫¨T T·∫§T C·∫¢ VIEWS V·ªöI TH√îNG TIN USER
        self.update_views_with_user()
        self.update_tab_access()
        
        # ! HI·ªÇN TH·ªä TH√îNG TIN USER
        self.show_user_info()

    def update_views_with_user(self):
        # ! C·∫¨P NH·∫¨T T·∫§T C·∫¢ VIEWS V·ªöI TH√îNG TIN USER HI·ªÜN T·∫†I
        try:
            # ! C·∫¨P NH·∫¨T EMPLOYEE VIEW - CH·ªà C·∫¨P NH·∫¨T ROLE, KH√îNG T·∫†O L·∫†I WIDGETS
            if self.employee_tab:
                self.employee_tab.current_user_role = self.current_user_role
                # ! C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI N√öT D·ª∞A TR√äN ROLE
                self.update_employee_buttons()
            
            # ! C·∫¨P NH·∫¨T ROOM VIEW
            if self.room_tab:
                self.room_tab.current_user_role = self.current_user_role
                self.update_room_buttons()
            
            # ! C·∫¨P NH·∫¨T BOOKING VIEW
            if self.booking_tab:
                self.booking_tab.current_user_id = self.current_user_id
                self.booking_tab.current_user_role = self.current_user_role
                # ! C·∫¨P NH·∫¨T LABEL NH√ÇN VI√äN
                self.booking_tab.lbl_nhanvien.config(text=self.current_user_id)
                self.booking_tab.refresh_data()
                
        except Exception as e:
            logger.error(f"‚ùå L·ªói c·∫≠p nh·∫≠t views: {str(e)}")

    def update_employee_buttons(self):
        # ! C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI N√öT TRONG EMPLOYEE VIEW
        if not self.employee_tab:
            return
            
        # ! T√åM T·∫§T C·∫¢ C√ÅC N√öT TRONG FRAME_BTN
        for widget in self.employee_tab.tab.winfo_children():
            if isinstance(widget, tk.Frame):
                for btn in widget.winfo_children():
                    if isinstance(btn, tk.Button):
                        btn_text = btn.cget('text')
                        if btn_text in ["Th√™m", "S·ª≠a", "X√≥a"]:
                            if self.current_user_role != "Tr∆∞·ªüng ph√≤ng":
                                btn.config(state="disabled")
                            else:
                                btn.config(state="normal")

    def update_room_buttons(self):
        # ! C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI N√öT TRONG ROOM VIEW
        if not self.room_tab:
            return
            
        # ! T√åM T·∫§T C·∫¢ C√ÅC N√öT TRONG FRAME_BTN
        for widget in self.room_tab.tab.winfo_children():
            if isinstance(widget, tk.Frame):
                for btn in widget.winfo_children():
                    if isinstance(btn, tk.Button):
                        btn_text = btn.cget('text')
                        if btn_text in ["Th√™m", "S·ª≠a", "X√≥a"]:
                            if self.current_user_role != "Tr∆∞·ªüng ph√≤ng":
                                btn.config(state="disabled")
                            else:
                                btn.config(state="normal")

    def update_tab_access(self):
        # ! B·∫¨T HO·∫∂C T·∫ÆT TRUY C·∫¨P TAB D·ª∞A TR√äN TR·∫†NG TH√ÅI ƒêƒÇNG NH·∫¨P
        is_logged_in = self.current_user_id is not None
        
        # ! L·∫§Y T·∫§T C·∫¢ T√äN TAB
        tab_names = ["ƒêƒÉng nh·∫≠p", "Nh√¢n vi√™n", "Kh√°ch h√†ng", "Qu·∫£n l√Ω ph√≤ng", "ƒê·∫∑t ph√≤ng"]
        
        # ! B·∫¨T T·∫§T C·∫¢ TAB N·∫æU ƒê√É ƒêƒÇNG NH·∫¨P, NG∆Ø·ª¢C L·∫†I CH·ªà B·∫¨T TAB ƒêƒÇNG NH·∫¨P
        for i, tab_name in enumerate(tab_names):
            if is_logged_in:
                self.notebook.tab(i, state="normal")
                if tab_name == "ƒêƒÉng nh·∫≠p":
                    self.notebook.tab(i, state="normal")
                else:
                    self.notebook.tab(i, state="normal")
            else:
                if tab_name == "ƒêƒÉng nh·∫≠p":
                    self.notebook.tab(i, state="normal")
                    self.notebook.select(i)  # ! CH·ªåN TAB ƒêƒÇNG NH·∫¨P
                else:
                    self.notebook.tab(i, state="disabled")

    def show_user_info(self):
        # ! HI·ªÇN TH·ªä TH√îNG TIN USER TR√äN GIAO DI·ªÜN
        try:
            # ! KI·ªÇM TRA XEM USER INFO FRAME ƒê√É T·ªíN T·∫†I CH∆ØA
            for widget in self.root.winfo_children():
                if isinstance(widget, tk.Frame) and hasattr(widget, '_is_user_frame'):
                    widget.destroy()

            user_frame = tk.Frame(self.root, bg="#2c3e50", height=40)
            user_frame.pack(fill="x", padx=10, pady=5)
            user_frame.pack_propagate(False)
            user_frame._is_user_frame = True  # ! ƒê√ÅNH D·∫§U L√Ä USER FRAME
            
            user_info = f"Xin ch√†o: {self.current_user_name} ({self.current_user_id}) - Vai tr√≤: {self.current_user_role}"
            tk.Label(user_frame, text=user_info, bg="#2c3e50", fg="white",
                    font=("Arial", 10, "bold")).pack(side="left", padx=10, pady=10)
            
            # ! N√öT ƒêƒÇNG XU·∫§T
            tk.Button(user_frame, text="ƒêƒÉng xu·∫•t", bg="#e74c3c", fg="white",
                     font=("Arial", 9, "bold"), command=self.logout).pack(side="right", padx=10, pady=5)
        except Exception as e:
            logger.error(f"‚ùå L·ªói hi·ªÉn th·ªã th√¥ng tin user: {str(e)}")

    def logout(self):
        # ! X·ª¨ L√ù ƒêƒÇNG XU·∫§T
        logger.info("üö™ ƒêang ƒëƒÉng xu·∫•t")
        
        # ! RESET TH√îNG TIN USER
        self.current_user_id = None
        self.current_user_role = None
        self.current_user_name = None
        
        # ! X√ìA USER INFO FRAME
        for widget in self.root.winfo_children():
            if isinstance(widget, tk.Frame) and hasattr(widget, '_is_user_frame'):
                widget.destroy()
        
        # ! C·∫¨P NH·∫¨T VIEWS V√Ä TRUY C·∫¨P TAB
        self.update_views_with_user()
        self.update_tab_access()

    def run(self):
        # ! CH·∫†Y ·ª®NG D·ª§NG
        logger.info("üîÑ B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p ch√≠nh")
        try:
            logger.info("üèÉ ·ª®ng d·ª•ng ƒëang ch·∫°y...")
            self.root.mainloop()
            logger.info("üëã ·ª®ng d·ª•ng ƒë√£ ƒë√≥ng")
        except Exception as e:
            logger.error(f"‚ùå L·ªói trong v√≤ng l·∫∑p ch√≠nh: {str(e)}", exc_info=True)

if __name__ == "__main__":
    # ! KH·ªûI CH·∫†Y ·ª®NG D·ª§NG
    logger.info("=" * 50)
    logger.info("·ª®NG D·ª§NG QU·∫¢N L√ù KH√ÅCH S·∫†N B·∫ÆT ƒê·∫¶U CH·∫†Y")
    logger.info("=" * 50)
    
    # ! KI·ªÇM TRA M√îI TR∆Ø·ªúNG
    logger.info(f"Python version: {sys.version}")
    logger.info(f"Current directory: {os.getcwd()}")
    logger.info(f"Tkinter version: {tk.TkVersion}")
    
    app = HotelManagementApp()
    app.run()