"""
H·ªÜ TH·ªêNG QU·∫¢N L√ù KH√ÅCH S·∫†N - SQL SERVER VERSION
·ª®ng d·ª•ng desktop qu·∫£n l√Ω kh√°ch s·∫°n
S·ª≠ d·ª•ng: Tkinter + SQL Server
"""

import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
import pyodbc
from datetime import datetime, timedelta
import hashlib
import re

class HotelManagementSystem:
    def __init__(self, root):
        self.root = root
        self.root.title("üè® H·ªá Th·ªëng Qu·∫£n L√Ω Kh√°ch S·∫°n")
        self.root.geometry("1400x800")
        
        # Maximize window
        try:
            self.root.state('zoomed')
        except:
            try:
                self.root.attributes('-zoomed', True)
            except:
                self.root.state('normal')
        
        self.current_user = None
        self.current_user_role = None
        
        # K·∫øt n·ªëi SQL Server
        if not self.connect_database():
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn SQL Server!")
            self.root.destroy()
            return
        
        # Kh·ªüi t·∫°o database
        self.init_database()
        
        # Hi·ªÉn th·ªã m√†n h√¨nh ƒëƒÉng nh·∫≠p
        self.show_login_screen()
    
    def connect_database(self):
        """K·∫øt n·ªëi ƒë·∫øn SQL Server"""
        try:
            # C·∫§U H√åNH K·∫æT N·ªêI - THAY ƒê·ªîI THEO M√îI TR∆Ø·ªúNG C·ª¶A B·∫†N
            server = 'localhost\\SQLEXPRESS'  # ho·∫∑c 'localhost' ho·∫∑c IP server
            database = 'HotelManagement'
            
            # T√πy ch·ªçn 1: Windows Authentication (khuy·∫øn ngh·ªã)
            connection_string = f'''
                DRIVER={{ODBC Driver 17 for SQL Server}};
                SERVER={server};
                DATABASE={database};
                Trusted_Connection=yes;
            '''
            
            # T√πy ch·ªçn 2: SQL Server Authentication
            # username = 'sa'
            # password = 'your_password'
            # connection_string = f'''
            #     DRIVER={{ODBC Driver 17 for SQL Server}};
            #     SERVER={server};
            #     DATABASE={database};
            #     UID={username};
            #     PWD={password};
            # '''
            
            self.conn = pyodbc.connect(connection_string)
            self.cursor = self.conn.cursor()
            
            # T·∫°o database n·∫øu ch∆∞a t·ªìn t·∫°i
            try:
                self.cursor.execute(f"CREATE DATABASE {database}")
                self.conn.commit()
            except:
                pass
            
            return True
            
        except Exception as e:
            messagebox.showerror("L·ªói k·∫øt n·ªëi", f"L·ªói: {str(e)}\n\nVui l√≤ng ki·ªÉm tra:\n1. SQL Server ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t\n2. SQL Server Service ƒëang ch·∫°y\n3. C·∫•u h√¨nh k·∫øt n·ªëi ƒë√∫ng")
            return False
    
    def init_database(self):
        """Kh·ªüi t·∫°o c√°c b·∫£ng trong database"""
        try:
            # B·∫£ng Users
            self.cursor.execute('''
                IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='users' AND xtype='U')
                CREATE TABLE users (
                    user_id INT IDENTITY(1,1) PRIMARY KEY,
                    username NVARCHAR(50) UNIQUE NOT NULL,
                    password NVARCHAR(100) NOT NULL,
                    full_name NVARCHAR(100) NOT NULL,
                    role NVARCHAR(20) NOT NULL,
                    email NVARCHAR(100),
                    phone NVARCHAR(20),
                    created_at DATETIME DEFAULT GETDATE()
                )
            ''')
            
            # B·∫£ng Rooms
            self.cursor.execute('''
                IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='rooms' AND xtype='U')
                CREATE TABLE rooms (
                    room_id INT IDENTITY(1,1) PRIMARY KEY,
                    room_number NVARCHAR(10) UNIQUE NOT NULL,
                    room_type NVARCHAR(20) NOT NULL,
                    price DECIMAL(18,2) NOT NULL,
                    status NVARCHAR(20) DEFAULT N'Tr·ªëng',
                    floor INT,
                    description NVARCHAR(500),
                    created_at DATETIME DEFAULT GETDATE()
                )
            ''')
            
            # B·∫£ng Customers
            self.cursor.execute('''
                IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='customers' AND xtype='U')
                CREATE TABLE customers (
                    customer_id INT IDENTITY(1,1) PRIMARY KEY,
                    full_name NVARCHAR(100) NOT NULL,
                    id_card NVARCHAR(20) UNIQUE NOT NULL,
                    phone NVARCHAR(20) NOT NULL,
                    email NVARCHAR(100),
                    address NVARCHAR(200),
                    created_at DATETIME DEFAULT GETDATE()
                )
            ''')
            
            # B·∫£ng Bookings
            self.cursor.execute('''
                IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='bookings' AND xtype='U')
                CREATE TABLE bookings (
                    booking_id INT IDENTITY(1,1) PRIMARY KEY,
                    customer_id INT NOT NULL,
                    room_id INT NOT NULL,
                    check_in DATE NOT NULL,
                    check_out DATE NOT NULL,
                    total_price DECIMAL(18,2) NOT NULL,
                    deposit DECIMAL(18,2) DEFAULT 0,
                    status NVARCHAR(20) DEFAULT N'ƒê√£ ƒë·∫∑t',
                    notes NVARCHAR(500),
                    created_at DATETIME DEFAULT GETDATE(),
                    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
                    FOREIGN KEY (room_id) REFERENCES rooms(room_id)
                )
            ''')
            
            # B·∫£ng Payments
            self.cursor.execute('''
                IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='payments' AND xtype='U')
                CREATE TABLE payments (
                    payment_id INT IDENTITY(1,1) PRIMARY KEY,
                    booking_id INT NOT NULL,
                    amount DECIMAL(18,2) NOT NULL,
                    payment_date DATETIME DEFAULT GETDATE(),
                    payment_method NVARCHAR(50) NOT NULL,
                    notes NVARCHAR(500),
                    FOREIGN KEY (booking_id) REFERENCES bookings(booking_id)
                )
            ''')
            
            # B·∫£ng Services
            self.cursor.execute('''
                IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='services' AND xtype='U')
                CREATE TABLE services (
                    service_id INT IDENTITY(1,1) PRIMARY KEY,
                    booking_id INT NOT NULL,
                    service_name NVARCHAR(100) NOT NULL,
                    price DECIMAL(18,2) NOT NULL,
                    quantity INT DEFAULT 1,
                    service_date DATETIME DEFAULT GETDATE(),
                    FOREIGN KEY (booking_id) REFERENCES bookings(booking_id)
                )
            ''')
            
            self.conn.commit()
            
            # T·∫°o t√†i kho·∫£n admin m·∫∑c ƒë·ªãnh
            self.create_default_admin()
            
            # T·∫°o d·ªØ li·ªáu m·∫´u
            self.create_sample_data()
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói kh·ªüi t·∫°o database: {str(e)}")
    
    def create_default_admin(self):
        """T·∫°o t√†i kho·∫£n admin m·∫∑c ƒë·ªãnh"""
        try:
            # Ki·ªÉm tra xem admin ƒë√£ t·ªìn t·∫°i ch∆∞a
            self.cursor.execute("SELECT COUNT(*) FROM users WHERE username = 'admin'")
            if self.cursor.fetchone()[0] == 0:
                password_hash = hashlib.sha256('admin123'.encode()).hexdigest()
                self.cursor.execute('''
                    INSERT INTO users (username, password, full_name, role, email, phone)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', ('admin', password_hash, 'Administrator', 'Admin', 'admin@hotel.com', '0123456789'))
                self.conn.commit()
        except Exception as e:
            pass
    
    def create_sample_data(self):
        """T·∫°o d·ªØ li·ªáu m·∫´u cho ph√≤ng"""
        try:
            self.cursor.execute('SELECT COUNT(*) FROM rooms')
            if self.cursor.fetchone()[0] == 0:
                rooms_data = [
                    ('101', 'Standard', 500000, N'Tr·ªëng', 1, N'Ph√≤ng ƒë∆°n ti√™u chu·∫©n'),
                    ('102', 'Standard', 500000, N'Tr·ªëng', 1, N'Ph√≤ng ƒë∆°n ti√™u chu·∫©n'),
                    ('201', 'Deluxe', 800000, N'Tr·ªëng', 2, N'Ph√≤ng ƒë√¥i cao c·∫•p'),
                    ('202', 'Deluxe', 800000, N'Tr·ªëng', 2, N'Ph√≤ng ƒë√¥i cao c·∫•p'),
                    ('301', 'Suite', 1500000, N'Tr·ªëng', 3, N'Ph√≤ng Suite sang tr·ªçng'),
                    ('302', 'VIP', 2000000, N'Tr·ªëng', 3, N'Ph√≤ng VIP ƒë·∫∑c bi·ªát'),
                ]
                
                for room in rooms_data:
                    self.cursor.execute('''
                        INSERT INTO rooms (room_number, room_type, price, status, floor, description)
                        VALUES (?, ?, ?, ?, ?, ?)
                    ''', room)
                
                self.conn.commit()
        except Exception as e:
            pass
    
    def hash_password(self, password):
        """M√£ h√≥a m·∫≠t kh·∫©u"""
        return hashlib.sha256(password.encode()).hexdigest()
    
    def show_login_screen(self):
        """Hi·ªÉn th·ªã m√†n h√¨nh ƒëƒÉng nh·∫≠p"""
        for widget in self.root.winfo_children():
            widget.destroy()
        
        login_frame = tk.Frame(self.root, bg='#2c3e50')
        login_frame.place(relx=0.5, rely=0.5, anchor='center')
        
        title_label = tk.Label(login_frame, text="üè® QU·∫¢N L√ù KH√ÅCH S·∫†N", 
                               font=('Arial', 28, 'bold'), bg='#2c3e50', fg='white')
        title_label.pack(pady=20)
        
        form_frame = tk.Frame(login_frame, bg='#34495e', padx=40, pady=30)
        form_frame.pack(padx=20, pady=20)
        
        tk.Label(form_frame, text="T√™n ƒëƒÉng nh·∫≠p:", font=('Arial', 12), 
                bg='#34495e', fg='white').grid(row=0, column=0, sticky='w', pady=10)
        self.username_entry = tk.Entry(form_frame, font=('Arial', 12), width=25)
        self.username_entry.grid(row=0, column=1, pady=10, padx=10)
        
        tk.Label(form_frame, text="M·∫≠t kh·∫©u:", font=('Arial', 12), 
                bg='#34495e', fg='white').grid(row=1, column=0, sticky='w', pady=10)
        self.password_entry = tk.Entry(form_frame, font=('Arial', 12), width=25, show='*')
        self.password_entry.grid(row=1, column=1, pady=10, padx=10)
        
        login_btn = tk.Button(form_frame, text="ƒêƒÉng Nh·∫≠p", font=('Arial', 12, 'bold'),
                             bg='#27ae60', fg='white', width=20, cursor='hand2',
                             command=self.login)
        login_btn.grid(row=2, column=0, columnspan=2, pady=20)
        
        info_label = tk.Label(login_frame, 
                            text="T√†i kho·∫£n m·∫∑c ƒë·ªãnh: admin / admin123",
                            font=('Arial', 10), bg='#2c3e50', fg='#ecf0f1')
        info_label.pack(pady=10)
        
        self.password_entry.bind('<Return>', lambda e: self.login())
        self.username_entry.focus()
    
    def login(self):
        """X·ª≠ l√Ω ƒëƒÉng nh·∫≠p"""
        username = self.username_entry.get().strip()
        password = self.password_entry.get().strip()
        
        if not username or not password:
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!")
            return
        
        password_hash = self.hash_password(password)
        
        self.cursor.execute('''
            SELECT user_id, username, full_name, role 
            FROM users 
            WHERE username = ? AND password = ?
        ''', (username, password_hash))
        
        user = self.cursor.fetchone()
        
        if user:
            self.current_user = user[1]
            self.current_user_role = user[3]
            messagebox.showinfo("Th√†nh c√¥ng", f"Ch√†o m·ª´ng {user[2]}!")
            self.show_main_screen()
        else:
            messagebox.showerror("L·ªói", "Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u!")
    
    def logout(self):
        """ƒêƒÉng xu·∫•t"""
        if messagebox.askyesno("X√°c nh·∫≠n", "B·∫°n c√≥ ch·∫Øc mu·ªën ƒëƒÉng xu·∫•t?"):
            self.current_user = None
            self.current_user_role = None
            self.show_login_screen()
    
    def show_main_screen(self):
        """Hi·ªÉn th·ªã m√†n h√¨nh ch√≠nh"""
        for widget in self.root.winfo_children():
            widget.destroy()
        
        # Header
        header_frame = tk.Frame(self.root, bg='#2c3e50', height=80)
        header_frame.pack(fill='x')
        
        tk.Label(header_frame, text="üè® H·ªÜ TH·ªêNG QU·∫¢N L√ù KH√ÅCH S·∫†N", 
                font=('Arial', 20, 'bold'), bg='#2c3e50', fg='white').pack(side='left', padx=20, pady=20)
        
        user_info = tk.Label(header_frame, text=f"üë§ {self.current_user} ({self.current_user_role})", 
                            font=('Arial', 11), bg='#2c3e50', fg='white')
        user_info.pack(side='right', padx=10)
        
        logout_btn = tk.Button(header_frame, text="ƒêƒÉng xu·∫•t", font=('Arial', 10),
                              bg='#e74c3c', fg='white', cursor='hand2',
                              command=self.logout)
        logout_btn.pack(side='right', padx=10)
        
        # Menu
        menu_frame = tk.Frame(self.root, bg='#34495e', width=200)
        menu_frame.pack(side='left', fill='y')
        
        menu_buttons = [
            ("üè† Trang Ch·ªß", self.show_dashboard),
            ("üõèÔ∏è Qu·∫£n L√Ω Ph√≤ng", self.show_room_management),
            ("üë• Qu·∫£n L√Ω Kh√°ch H√†ng", self.show_customer_management),
            ("üìÖ ƒê·∫∑t Ph√≤ng", self.show_booking_management),
            ("üí∞ Thanh To√°n", self.show_payment_management),
        ]
        
        for text, command in menu_buttons:
            btn = tk.Button(menu_frame, text=text, font=('Arial', 11),
                          bg='#34495e', fg='white', cursor='hand2',
                          width=20, height=2, anchor='w', padx=20,
                          relief='flat', command=command)
            btn.pack(fill='x', pady=2)
            btn.bind('<Enter>', lambda e, b=btn: b.config(bg='#2c3e50'))
            btn.bind('<Leave>', lambda e, b=btn: b.config(bg='#34495e'))
        
        # Content
        self.content_frame = tk.Frame(self.root, bg='#ecf0f1')
        self.content_frame.pack(side='right', fill='both', expand=True)
        
        self.show_dashboard()
    
    def clear_content_frame(self):
        """X√≥a n·ªôi dung frame ch√≠nh"""
        for widget in self.content_frame.winfo_children():
            widget.destroy()
    
    def show_dashboard(self):
        """Hi·ªÉn th·ªã dashboard - t∆∞∆°ng t·ª± code SQLite nh∆∞ng c√≥ ƒëi·ªÅu ch·ªânh query"""
        self.clear_content_frame()
        
        tk.Label(self.content_frame, text="üìä TRANG CH·ª¶ - TH·ªêNG K√ä T·ªîNG QUAN", 
                font=('Arial', 18, 'bold'), bg='#ecf0f1').pack(pady=20)
        
        stats_frame = tk.Frame(self.content_frame, bg='#ecf0f1')
        stats_frame.pack(pady=20, padx=20, fill='x')
        
        # C√°c th·ªëng k√™
        self.cursor.execute('SELECT COUNT(*) FROM rooms')
        total_rooms = self.cursor.fetchone()[0]
        
        self.cursor.execute("SELECT COUNT(*) FROM rooms WHERE status=N'Tr·ªëng'")
        empty_rooms = self.cursor.fetchone()[0]
        
        self.cursor.execute("SELECT COUNT(*) FROM rooms WHERE status=N'ƒêang s·ª≠ d·ª•ng'")
        occupied_rooms = self.cursor.fetchone()[0]
        
        self.cursor.execute('SELECT COUNT(*) FROM customers')
        total_customers = self.cursor.fetchone()[0]
        
        today = datetime.now().strftime('%Y-%m-%d')
        self.cursor.execute("SELECT COUNT(*) FROM bookings WHERE CONVERT(DATE, created_at) = ?", (today,))
        today_bookings = self.cursor.fetchone()[0]
        
        current_month = datetime.now().strftime('%Y-%m')
        self.cursor.execute("""
            SELECT ISNULL(SUM(amount), 0) FROM payments 
            WHERE FORMAT(payment_date, 'yyyy-MM') = ?
        """, (current_month,))
        monthly_revenue = self.cursor.fetchone()[0]
        
        stats_data = [
            ("üè† T·ªïng s·ªë ph√≤ng", total_rooms, "#3498db"),
            ("‚úÖ Ph√≤ng tr·ªëng", empty_rooms, "#27ae60"),
            ("üî¥ ƒêang s·ª≠ d·ª•ng", occupied_rooms, "#e74c3c"),
            ("üë• Kh√°ch h√†ng", total_customers, "#9b59b6"),
            ("üìÖ ƒê·∫∑t ph√≤ng h√¥m nay", today_bookings, "#f39c12"),
            ("üí∞ Doanh thu th√°ng", f"{monthly_revenue:,.0f} ƒë", "#16a085"),
        ]
        
        for i, (label, value, color) in enumerate(stats_data):
            card = tk.Frame(stats_frame, bg=color, width=200, height=120)
            card.grid(row=i//3, column=i%3, padx=10, pady=10, sticky='nsew')
            
            tk.Label(card, text=label, font=('Arial', 11), 
                    bg=color, fg='white').pack(pady=10)
            tk.Label(card, text=str(value), font=('Arial', 20, 'bold'), 
                    bg=color, fg='white').pack(pady=5)
        
        for i in range(3):
            stats_frame.columnconfigure(i, weight=1)
    
    def show_room_management(self):
        """Qu·∫£n l√Ω ph√≤ng - Placeholder"""
        self.clear_content_frame()
        tk.Label(self.content_frame, text="üõèÔ∏è QU·∫¢N L√ù PH√íNG", 
                font=('Arial', 18, 'bold'), bg='#ecf0f1').pack(pady=20)
        tk.Label(self.content_frame, text="Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...", 
                font=('Arial', 12), bg='#ecf0f1').pack(pady=20)
    
    def show_customer_management(self):
        """Qu·∫£n l√Ω kh√°ch h√†ng - Placeholder"""
        self.clear_content_frame()
        tk.Label(self.content_frame, text="üë• QU·∫¢N L√ù KH√ÅCH H√ÄNG", 
                font=('Arial', 18, 'bold'), bg='#ecf0f1').pack(pady=20)
        tk.Label(self.content_frame, text="Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...", 
                font=('Arial', 12), bg='#ecf0f1').pack(pady=20)
    
    def show_booking_management(self):
        """Qu·∫£n l√Ω ƒë·∫∑t ph√≤ng - Placeholder"""
        self.clear_content_frame()
        tk.Label(self.content_frame, text="üìÖ QU·∫¢N L√ù ƒê·∫∂T PH√íNG", 
                font=('Arial', 18, 'bold'), bg='#ecf0f1').pack(pady=20)
        tk.Label(self.content_frame, text="Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...", 
                font=('Arial', 12), bg='#ecf0f1').pack(pady=20)
    
    def show_payment_management(self):
        """Qu·∫£n l√Ω thanh to√°n - Placeholder"""
        self.clear_content_frame()
        tk.Label(self.content_frame, text="üí∞ QU·∫¢N L√ù THANH TO√ÅN", 
                font=('Arial', 18, 'bold'), bg='#ecf0f1').pack(pady=20)
        tk.Label(self.content_frame, text="Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...", 
                font=('Arial', 12), bg='#ecf0f1').pack(pady=20)
    
    def __del__(self):
        """ƒê√≥ng k·∫øt n·ªëi khi tho√°t"""
        try:
            self.conn.close()
        except:
            pass

# Ch·∫°y ·ª©ng d·ª•ng
if __name__ == "__main__":
    root = tk.Tk()
    app = HotelManagementSystem(root)
    root.mainloop()